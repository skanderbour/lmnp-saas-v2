#!/usr/bin/env python3
"""
Syst√®me d'Agents IA Sp√©cialis√©s pour LMNP SAAS
Architecture avec 3 agents experts selon les sp√©cifications
"""

import os
import json
import logging
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum
from openai import OpenAI
from datetime import datetime

# Configuration OpenAI
client = OpenAI(
    api_key=os.environ.get('OPENAI_API_KEY'),
    base_url=os.environ.get('OPENAI_API_BASE', 'https://api.openai.com/v1')
)

logger = logging.getLogger(__name__)

class AgentType(Enum):
    """Types d'agents IA sp√©cialis√©s"""
    PRODUIT = "agentProduit"
    DEVELOPPEUR = "agentDev" 
    FISCAL = "agentFiscal"

@dataclass
class AgentResponse:
    """R√©ponse d'un agent IA"""
    agent_type: AgentType
    content: str
    confidence: float
    metadata: Dict[str, Any]
    timestamp: datetime

class AgentProduit:
    """
    üéØ Chief Product Officer IA - agentProduit
    
    R√¥le : Traduire le besoin utilisateur en produit simple, utile et bien con√ßu
    Missions :
    - D√©finir les user stories (MVP puis roadmap)
    - Cr√©er les wireframes et maquettes (avec Figma + prompts IA)
    - Structurer l'arborescence du produit et ses fonctionnalit√©s
    - Cr√©er le cahier des charges de chaque fonctionnalit√©
    """
    
    def __init__(self):
        self.agent_type = AgentType.PRODUIT
        self.expertise = [
            "User Experience Design",
            "Product Management", 
            "User Stories & MVP",
            "Wireframing & Prototyping",
            "Feature Specification",
            "LMNP User Journey"
        ]
        
    def get_system_prompt(self) -> str:
        return """Tu es le Chief Product Officer IA sp√©cialis√© dans les produits LMNP.

EXPERTISE :
- Conception de produits simples et efficaces ("less is more")
- D√©finition d'user stories et MVP pour investisseurs LMNP
- Cr√©ation de wireframes et sp√©cifications fonctionnelles
- Optimisation de l'exp√©rience utilisateur pour la fiscalit√©

MISSION :
Traduire les besoins utilisateur en sp√©cifications produit claires et actionables.

STYLE :
- Approche "less is more" : simplicit√© maximale
- Focus sur l'automatisation des calculs complexes
- Interface intuitive pour non-experts comptables
- Parcours guid√© √©tape par √©tape

R√âPONSES :
- Sp√©cifications fonctionnelles d√©taill√©es
- User stories avec crit√®res d'acceptation
- Wireframes en format textuel
- Recommandations UX/UI"""

    def process_request(self, user_input: str, context: Dict[str, Any] = None) -> AgentResponse:
        """Traite une demande utilisateur et g√©n√®re les sp√©cifications produit"""
        try:
            messages = [
                {"role": "system", "content": self.get_system_prompt()},
                {"role": "user", "content": f"""
Contexte LMNP : {json.dumps(context or {}, indent=2)}

Demande utilisateur : {user_input}

G√©n√®re les sp√©cifications produit pour r√©pondre √† ce besoin en suivant l'approche "less is more".
"""}
            ]
            
            response = client.chat.completions.create(
                model="gpt-4",
                messages=messages,
                temperature=0.3,
                max_tokens=2000
            )
            
            content = response.choices[0].message.content
            
            return AgentResponse(
                agent_type=self.agent_type,
                content=content,
                confidence=0.9,
                metadata={
                    "expertise_used": self.expertise,
                    "approach": "less_is_more",
                    "focus": "user_experience"
                },
                timestamp=datetime.now()
            )
            
        except Exception as e:
            logger.error(f"Erreur Agent Produit: {e}")
            return AgentResponse(
                agent_type=self.agent_type,
                content=f"Erreur lors du traitement: {str(e)}",
                confidence=0.0,
                metadata={"error": str(e)},
                timestamp=datetime.now()
            )

class AgentDeveloppeur:
    """
    ‚öôÔ∏è Lead Developer Full Stack IA - agentDev
    
    R√¥le : D√©velopper le backend, frontend et APIs n√©cessaires
    Missions :
    - Ma√Ætriser la stack technique (Python/FastAPI + PostgreSQL + React)
    - Choisir l'authentification, l'upload de docs, calculs d'amortissement, g√©n√©ration PDF/FEC
    - G√©rer l'UX et l'identification, l'upload de docs, calculs d'amortissement, g√©n√©ration PDF/FEC
    - Maintenir une architecture scalable
    """
    
    def __init__(self):
        self.agent_type = AgentType.DEVELOPPEUR
        self.expertise = [
            "Python FastAPI Development",
            "React TypeScript Frontend",
            "PostgreSQL Database Design",
            "Authentication & Security",
            "PDF Generation & FEC",
            "Scalable Architecture"
        ]
        
    def get_system_prompt(self) -> str:
        return """Tu es le Lead Developer Full Stack IA sp√©cialis√© dans les applications LMNP.

STACK TECHNIQUE :
- Backend : Python FastAPI + SQLAlchemy + PostgreSQL
- Frontend : React 19 + TypeScript + Radix UI + Tailwind
- IA : OpenAI GPT-4 avec agents sp√©cialis√©s
- S√©curit√© : JWT, chiffrement, RGPD

EXPERTISE :
- Architecture scalable et maintenable
- APIs RESTful avec documentation automatique
- Calculs fiscaux complexes et amortissements
- G√©n√©ration PDF (liasses fiscales) et FEC
- Authentification s√©curis√©e et gestion des sessions
- Interface utilisateur responsive et accessible

MISSION :
Impl√©menter les sp√©cifications techniques avec les meilleures pratiques de d√©veloppement.

R√âPONSES :
- Code Python/TypeScript pr√™t √† l'emploi
- Architecture technique d√©taill√©e
- APIs document√©es avec exemples
- Scripts de d√©ploiement et configuration"""

    def process_request(self, user_input: str, context: Dict[str, Any] = None) -> AgentResponse:
        """Traite une demande de d√©veloppement et g√©n√®re le code/architecture"""
        try:
            messages = [
                {"role": "system", "content": self.get_system_prompt()},
                {"role": "user", "content": f"""
Sp√©cifications techniques : {json.dumps(context or {}, indent=2)}

Demande de d√©veloppement : {user_input}

G√©n√®re le code et l'architecture technique pour impl√©menter cette fonctionnalit√©.
"""}
            ]
            
            response = client.chat.completions.create(
                model="gpt-4",
                messages=messages,
                temperature=0.2,
                max_tokens=3000
            )
            
            content = response.choices[0].message.content
            
            return AgentResponse(
                agent_type=self.agent_type,
                content=content,
                confidence=0.95,
                metadata={
                    "expertise_used": self.expertise,
                    "stack": "FastAPI_React_PostgreSQL",
                    "focus": "scalable_architecture"
                },
                timestamp=datetime.now()
            )
            
        except Exception as e:
            logger.error(f"Erreur Agent D√©veloppeur: {e}")
            return AgentResponse(
                agent_type=self.agent_type,
                content=f"Erreur lors du d√©veloppement: {str(e)}",
                confidence=0.0,
                metadata={"error": str(e)},
                timestamp=datetime.now()
            )

class AgentFiscal:
    """
    üìä Expert-Comptable IA - agentFiscal
    
    R√¥le : Fournir toute la logique fiscale, les formulaires CERFA, et les calculs conformes √† la r√©glementation
    Missions :
    - Traduire les r√®gles fiscales en formules (2031, 2033-A √† G)
    - Valider les r√®gles d'amortissement, les micro-BIC, TVA, etc.
    - Assurer la conformit√© r√©glementaire et les mises √† jour fiscales
    """
    
    def __init__(self):
        self.agent_type = AgentType.FISCAL
        self.expertise = [
            "R√©glementation LMNP 2024-2025",
            "Formulaires CERFA 2031/2033",
            "Calculs d'amortissements lin√©aires",
            "Optimisation micro-BIC vs r√©gime r√©el",
            "Conformit√© fiscale fran√ßaise",
            "G√©n√©ration liasses fiscales"
        ]
        
    def get_system_prompt(self) -> str:
        return """Tu es l'Expert-Comptable IA sp√©cialis√© dans la fiscalit√© LMNP.

EXPERTISE FISCALE :
- R√©glementation LMNP en vigueur (2024-2025)
- Formulaires CERFA 2031 (bilan) et 2033 (compte de r√©sultat)
- Calculs d'amortissements selon m√©thode lin√©aire
- Optimisation fiscale micro-BIC vs r√©gime r√©el
- R√®gles de d√©ductibilit√© des charges
- Prorata temporis et r√©partition terrain/construction

R√àGLES CL√âS :
- Amortissement lin√©aire : construction 20-25 ans, frais notaire/agence 15 ans
- R√©partition standard : terrain 20% (non amortissable), construction 80%
- Micro-BIC : abattement 50% si recettes < 77 700‚Ç¨
- R√©gime r√©el : d√©duction charges r√©elles + amortissements

MISSION :
Fournir des calculs fiscaux pr√©cis et conformes √† la r√©glementation fran√ßaise.

R√âPONSES :
- Formules de calcul d√©taill√©es
- R√®gles fiscales applicables
- Optimisations recommand√©es
- Validation de conformit√©"""

    def process_request(self, user_input: str, context: Dict[str, Any] = None) -> AgentResponse:
        """Traite une demande fiscale et g√©n√®re les calculs/r√®gles appropri√©s"""
        try:
            messages = [
                {"role": "system", "content": self.get_system_prompt()},
                {"role": "user", "content": f"""
Donn√©es fiscales : {json.dumps(context or {}, indent=2)}

Question fiscale : {user_input}

Fournis les calculs fiscaux pr√©cis et les r√®gles applicables selon la r√©glementation LMNP.
"""}
            ]
            
            response = client.chat.completions.create(
                model="gpt-4",
                messages=messages,
                temperature=0.1,
                max_tokens=2500
            )
            
            content = response.choices[0].message.content
            
            return AgentResponse(
                agent_type=self.agent_type,
                content=content,
                confidence=0.98,
                metadata={
                    "expertise_used": self.expertise,
                    "regulation": "LMNP_2024_2025",
                    "focus": "fiscal_compliance"
                },
                timestamp=datetime.now()
            )
            
        except Exception as e:
            logger.error(f"Erreur Agent Fiscal: {e}")
            return AgentResponse(
                agent_type=self.agent_type,
                content=f"Erreur lors du calcul fiscal: {str(e)}",
                confidence=0.0,
                metadata={"error": str(e)},
                timestamp=datetime.now()
            )

class OrchestrateursAgentsIA:
    """
    üé≠ Orchestrateur des Agents IA Sp√©cialis√©s
    
    G√®re le routage intelligent des requ√™tes vers les agents appropri√©s
    et coordonne les r√©ponses multi-agents pour des demandes complexes
    """
    
    def __init__(self):
        self.agents = {
            AgentType.PRODUIT: AgentProduit(),
            AgentType.DEVELOPPEUR: AgentDeveloppeur(),
            AgentType.FISCAL: AgentFiscal()
        }
        
    def detect_agent_needed(self, user_input: str) -> List[AgentType]:
        """D√©tecte quel(s) agent(s) sont n√©cessaires pour traiter la demande"""
        user_input_lower = user_input.lower()
        
        agents_needed = []
        
        # Mots-cl√©s pour Agent Produit
        produit_keywords = [
            "user story", "wireframe", "ux", "ui", "interface", "parcours", 
            "exp√©rience", "simple", "navigation", "√©tape", "workflow"
        ]
        
        # Mots-cl√©s pour Agent D√©veloppeur  
        dev_keywords = [
            "code", "api", "backend", "frontend", "base de donn√©es", "architecture",
            "impl√©mentation", "d√©veloppement", "technique", "react", "python"
        ]
        
        # Mots-cl√©s pour Agent Fiscal
        fiscal_keywords = [
            "amortissement", "fiscal", "cerfa", "2031", "2033", "micro-bic",
            "charges", "recettes", "calcul", "r√©glementation", "conformit√©"
        ]
        
        if any(keyword in user_input_lower for keyword in produit_keywords):
            agents_needed.append(AgentType.PRODUIT)
            
        if any(keyword in user_input_lower for keyword in dev_keywords):
            agents_needed.append(AgentType.DEVELOPPEUR)
            
        if any(keyword in user_input_lower for keyword in fiscal_keywords):
            agents_needed.append(AgentType.FISCAL)
            
        # Si aucun agent d√©tect√©, utiliser l'agent Produit par d√©faut
        if not agents_needed:
            agents_needed.append(AgentType.PRODUIT)
            
        return agents_needed
    
    async def process_request(self, user_input: str, context: Dict[str, Any] = None) -> List[AgentResponse]:
        """Traite une demande en routant vers les agents appropri√©s"""
        agents_needed = self.detect_agent_needed(user_input)
        responses = []
        
        for agent_type in agents_needed:
            agent = self.agents[agent_type]
            response = agent.process_request(user_input, context)
            responses.append(response)
            
        return responses
    
    async def get_agent_response(self, agent_type: AgentType, user_input: str, context: Dict[str, Any] = None) -> AgentResponse:
        """Obtient une r√©ponse d'un agent sp√©cifique"""
        if agent_type not in self.agents:
            raise ValueError(f"Agent type {agent_type} not found")
            
        agent = self.agents[agent_type]
        return agent.process_request(user_input, context)

# Instance globale de l'orchestrateur
orchestrateur = OrchestrateursAgentsIA()

# Fonctions utilitaires pour l'utilisation dans l'application
async def demander_agent_produit(demande: str, contexte: Dict = None) -> str:
    """Demande √† l'Agent Produit de d√©finir les sp√©cifications"""
    response = await orchestrateur.get_agent_response(AgentType.PRODUIT, demande, contexte)
    return response.content

async def demander_agent_dev(demande: str, contexte: Dict = None) -> str:
    """Demande √† l'Agent D√©veloppeur d'impl√©menter une fonctionnalit√©"""
    response = await orchestrateur.get_agent_response(AgentType.DEVELOPPEUR, demande, contexte)
    return response.content

async def demander_agent_fiscal(demande: str, contexte: Dict = None) -> str:
    """Demande √† l'Agent Fiscal de calculer ou valider des r√®gles fiscales"""
    response = await orchestrateur.get_agent_response(AgentType.FISCAL, demande, contexte)
    return response.content

async def chat_intelligent(message: str, contexte: Dict = None) -> List[str]:
    """Chat intelligent qui route automatiquement vers les bons agents"""
    responses = await orchestrateur.process_request(message, contexte)
    return [response.content for response in responses]

